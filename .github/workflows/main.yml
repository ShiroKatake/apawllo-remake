name: Build for QA üéÆ

on: 
  workflow_dispatch:
  push:
    branches:
      - develop
    paths-ignore:
      - '.github/**'

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  checksLicense:
    name: Check for Unity license ‚úîÔ∏è
    runs-on: ubuntu-latest
    steps:
      - name: Fail - No license
        if: ${{ !startsWith(env.UNITY_LICENSE, '<') }}
        run: exit 1
          
  testRunner:
    name: Test in ${{ matrix.testMode }} ‚ú®
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - EditMode
          - PlayMode
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-test-project-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-test-project-
            Library-

      - name: Run Tests (Edit & Play mode)
        uses: game-ci/unity-test-runner@v2.0-alpha-6
        id: testRunner
        with:
          testMode: ${{ matrix.testMode }}
          checkName: ${{ matrix.testMode }} test results
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: Test results (${{ matrix.testMode }})
          path: ${{ steps.testRunner.outputs.artifactsPath }}
  
  buildWebGL:
    needs: testRunner
    name: Build for WebGL üåê
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
          
      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-WebGL
          restore-keys: |
            Library-build-
            Library-
            
      - name: Build into WebGL
        uses: game-ci/unity-builder@v2
        with:
          targetPlatform: WebGL

      - name: Upload Build
        uses: actions/upload-artifact@v2
        with:
          name: build-WebGL
          path: build/WebGL

  buildWindows:
    needs: testRunner
    name: Build for Windows üñ•Ô∏è
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
          
      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-StandaloneWindows64
          restore-keys: |
            Library-build-
            Library-
      
      - name: Build into Windows x64
        uses: game-ci/unity-builder@v2
        with:
          targetPlatform: StandaloneWindows64

      - name: Upload Build
        uses: actions/upload-artifact@v2
        with:
          name: build-StandaloneWindows64
          path: build/StandaloneWindows64
          
  deployWebGL:
    needs: buildWebGL
    name: Deploy WebGL üåê
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Build
        uses: actions/download-artifact@v2
        with:
          name: build-WebGL
          path: build

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          branch: build-webgl
          folder: build/WebGL
          
  deployWindows:
    needs: buildWindows
    name: Deploy Windows üñ•Ô∏è
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Build
        uses: actions/download-artifact@v2
        with:
          name: build-StandaloneWindows64
          path: build
          
      - name: Zip Build
        uses: TheDoctor0/zip-release@0.6.0
        with:
          type: 'zip'
          filename: 'build.zip'
          
  releaseDraft:
    name: Release Draft
    runs-on: ubuntu-latest
    steps:
      - name: Draft a Release
        uses: release-drafter/release-drafter@master
        id: release-draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      upload_url: ${{ steps.release-draft.outputs.upload_url }}
      tag_name: ${{ steps.release-draft.outputs.tag_name }}
  
  uploadBuild:
    needs: [releaseDraft, deployWindows]
    name: Upload Windows x64 Build to Release
    runs-on: ubuntu-latest
    steps:
      - name: Upload Build as Release Asset
        uses: gfreezy/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.releaseDraft.outputs.upload_url }}
          asset_path: ./build.zip
          asset_name: Apawllo-${{ needs.releaseDraft.outputs.tag_name }}.zip
          asset_content_type: application/zip
          
  publishRelease:
    needs: [deployWebGL, uploadBuild, releaseDraft]
    name: Publish Release
    runs-on: ubuntu-latest
    steps:
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.release-draft.outputs.id }}
