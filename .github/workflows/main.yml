name: Build for QA 🎮

on: 
  workflow_dispatch:
  push:
    branches:
      - develop
    paths-ignore:
      - '.github/**'
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  
jobs:
  testRunner:
    name: ${{ matrix.testMode }} Test 🔎
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - EditMode
          - PlayMode
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-test-project-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-test-project-
            Library-

      - name: Run Tests (Edit & Play mode)
        uses: game-ci/unity-test-runner@v2.0-alpha-6
        id: testRunner
        with:
          testMode: ${{ matrix.testMode }}
          checkName: ${{ matrix.testMode }} Test Results ✨
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: Test results (${{ matrix.testMode }})
          path: ${{ steps.testRunner.outputs.artifactsPath }}
  
  buildWebGL:
    needs: testRunner
    name: Build WebGL 🌐
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
          
      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-WebGL
          restore-keys: |
            Library-build-
            Library-
            
      - name: Build into WebGL
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: WebGL

      - name: Upload Build
        uses: actions/upload-artifact@v2
        with:
          name: build-WebGL
          path: build/WebGL

  buildWindows:
    needs: testRunner
    name: Build Windows x64 🖥️
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
          
      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-StandaloneWindows64
          restore-keys: |
            Library-build-
            Library-
      
      - name: Build into Windows x64
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: StandaloneWindows64

      - name: Upload Build
        uses: actions/upload-artifact@v2
        with:
          name: build-StandaloneWindows64
          path: build/StandaloneWindows64
          
  deployWebGL:
    needs: buildWebGL
    name: Deploy WebGL 🚢
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Build
        uses: actions/download-artifact@v2
        with:
          name: build-WebGL
          path: build

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          branch: build-webgl
          folder: build/WebGL
          
  releaseDraft:
    needs: buildWindows
    name: Release Draft 📜
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.output_upload_url.outputs.upload_url }}
      tag_name: ${{ steps.output_tag_name.outputs.tag_name }}
      release_id: ${{ steps.output_release_id.outputs.release_id }}
      html_url: ${{ steps.output_html_url.outputs.html_url }}
    steps:
      - name: Draft a Release
        uses: release-drafter/release-drafter@master
        id: release-draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: output_upload_url
        run: echo "::set-output name=upload_url::${{ steps.release-draft.outputs.upload_url }}"
      - id: output_tag_name
        run: echo "::set-output name=tag_name::${{ steps.release-draft.outputs.tag_name }}"
      - id: output_release_id
        run: echo "::set-output name=release_id::${{ steps.release-draft.outputs.id }}"
      - id: output_html_url
        run: echo "::set-output name=html_url::${{ steps.release-draft.outputs.html_url }}"
  
  uploadBuild:
    needs: [releaseDraft, buildWindows]
    name: Upload Build to Draft 📦
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Build
        uses: actions/download-artifact@v2
        with:
          name: build-StandaloneWindows64
          path: build
          
      - name: Zip Build
        uses: TheDoctor0/zip-release@0.6.0
        with:
          type: 'zip'
          filename: 'build.zip'
          
      - name: Upload Build as Release Asset
        uses: gfreezy/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.releaseDraft.outputs.upload_url }}
          release_id: ${{ needs.releaseDraft.outputs.release_id }}
          asset_path: ./build.zip
          asset_name: Apawllo-${{ needs.releaseDraft.outputs.tag_name }}.zip
          asset_content_type: application/zip
          
  publishRelease:
    needs: [deployWebGL, releaseDraft, uploadBuild]
    name: Publish Release 🚀
    runs-on: ubuntu-latest
    steps:
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.releaseDraft.outputs.release_id }}

  notifyDiscord:
    needs: [releaseDraft, publishRelease]
    name: Notify on Discord 📢
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Success
        if: ${{ needs.publishRelease.result == 'success' }}
        uses: nobrayner/discord-webhook@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          discord-webhook: ${{ secrets.WEBHOOK_URL }}
          username: '${{ github.workflow }}'
          avatar-url: 'https://media.discordapp.net/attachments/857447804977152000/894758305690452039/success_kid.png'
          title: 'New build status (${{ needs.releaseDraft.outputs.tag_name }}): SUCCESS!'
          description: | 
            Release notes can be viewed [here](https://github.com/ShiroKatake/apawllo-remake/releases/tag/${{ needs.releaseDraft.outputs.tag_name }})
            WebGL build can be played [here](https://shirokatake.github.io/apawllo-remake/)
            Windows x64 build can be downloaded [here](https://github.com/ShiroKatake/apawllo-remake/releases/download/${{ needs.releaseDraft.outputs.tag_name }}/Apawllo-${{ needs.releaseDraft.outputs.tag_name }}.zip)
          include-details: 'false'
          color-success: '#2eb886'
          
      - name: Notify Failure
        if: ${{ needs.publishRelease.result != 'success' }}
        uses: nobrayner/discord-webhook@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          discord-webhook: ${{ secrets.WEBHOOK_URL }}
          username: '${{ github.workflow }}'
          avatar-url: 'https://media.discordapp.net/attachments/857447804977152000/894760486439125042/explosion.png'
          title: 'New build status (${{ needs.releaseDraft.outputs.tag_name }}): FAILED . . .'
          description: 'Status of build phases'
          include-details: 'true'
          color-failure: '#a30200'
        
